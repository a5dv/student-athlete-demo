datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  firstName          String?
  lastName           String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  role               Role       @default(CLIENT)
  status             UserStatus @default(PENDING)
  lastLogin          DateTime?

  accounts      Account[]
  sessions      Session[]

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  bookingsAsClient   Booking[]  @relation("ClientBookings")
  bookingsAsProvider Booking[]  @relation("ProviderBookings")
}

model Booking {
  id               String         @id @default(cuid())
  status           BookingStatus
  clientId         String
  providerId       String
  category         Category
  dateTime         DateTime
  location         String
  price            Float
  paymentMethod    PaymentMethod?
  paymentStatus    PaymentStatus
  paymentReference String?
  paymentDate      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  isRescheduled    Boolean        @default(false)
  client           User           @relation("ClientBookings", fields: [clientId], references: [id])
  provider         User           @relation("ProviderBookings", fields: [providerId], references: [id])
}

enum Role {
  ADMIN
  CLIENT
  PROVIDER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Category {
  BASKETBALL
  BASEBALL
  FOOTBALL
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  ADMIN_MANUAL
}

enum PaymentStatus {
  PAID
  PENDING
  REFUNDED
  CANCELLED
  FAILED
}

// Models below for Next-Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

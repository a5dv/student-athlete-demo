datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  firstName          String?
  lastName           String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  role               Role       @default(CLIENT)
  status             UserStatus @default(PENDING)
  lastLogin          DateTime?

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  bookingsAsClient   Booking[]  @relation("ClientBookings")
  bookingsAsProvider Booking[]  @relation("ProviderBookings")

  timeSlotsAsProvider TimeSlot[] @relation("ProviderTimeSlots")


  // For Next-Auth
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  CLIENT
  PROVIDER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

model Booking {
  id               String         @id @default(cuid())
  status           BookingStatus
  timeSlotId       String
  clientId         String
  providerId       String
  categoryId       String
  locationId       String
  dateTime         DateTime
  price            Float
  paymentMethod    PaymentMethod?
  paymentStatus    PaymentStatus
  paymentReference String?
  paymentDate      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  isRescheduled    Boolean        @default(false)

  client           User           @relation("ClientBookings", fields: [clientId], references: [id])
  provider         User           @relation("ProviderBookings", fields: [providerId], references: [id])
  category         Category       @relation(fields: [categoryId], references: [id])
  location         SessionLocation @relation(fields: [locationId], references: [id])
  timeslot         TimeSlot       @relation(fields: [timeSlotId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  ADMIN_MANUAL
}

enum PaymentStatus {
  PAID
  PENDING
  REFUNDED
  CANCELLED
  FAILED
}
model Category {
  id                   String    @id @default(cuid())
  name                 String
  description          String?
  minDurationInMinutes Int
  maxDurationInMinutes Int
  minClients           Int
  maxClients           Int
  status               CategoryStatus    @default(ACTIVE)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?
  
  // Relations
  pricingRules         PricingRule[]
  availableLocations   LocationCategory[]
  timeSlots            TimeSlot[]
  bookings             Booking[]
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

model SessionLocation {
  id                 String    @id @default(cuid())
  zipCode            String
  address            String
  city               String
  state              String
  country            String
  status             LocationStatus         @default(ACTIVE)
  capacity           Int
  approvalStatus     LocationApprovalStatus  @default(PENDING)
  approvedAt         DateTime?
  approvedBy         String?
  availabilityStart  DateTime?
  availabilityEnd    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  
  // Relations
  pricingRules        PricingRule[]
  availableCategories LocationCategory[]
  timeSlots           TimeSlot[]
  bookings            Booking[]

  @@unique([zipCode, address, city, state, country])
}

model LocationCategory {
  locationId String
  categoryId String
  
  location SessionLocation @relation(fields: [locationId], references: [id])
  category Category        @relation(fields: [categoryId], references: [id])
  
  @@id([locationId, categoryId])
}

enum LocationApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}


enum LocationStatus {
  ACTIVE
  INACTIVE
}


// model CategoryPricing {
//   id          String   @id @default(cuid())
//   categoryId  String
//   locationId  String
//   basePrice   Float
//   weekendRate Float?
//   peakHourRate Float?
  
//   category    Category        @relation(fields: [categoryId], references: [id])
//   location    SessionLocation @relation(fields: [locationId], references: [id])
  
//   @@unique([categoryId, locationId])
// }

model TimeSlot {
  id           String         @id @default(cuid())
  providerId   String         // The provider who created this timeslot
  locationId   String
  categoryId   String
  startTime    DateTime
  endTime      DateTime
  maxClients   Int            // How many clients can book this slot
  currentBookings Int         @default(0)
  status       TimeSlotStatus @default(AVAILABLE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  provider     User           @relation("ProviderTimeSlots", fields: [providerId], references: [id])
  location     SessionLocation @relation(fields: [locationId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  bookings     Booking[]       // One-to-many relationship with bookings
}

enum TimeSlotStatus {
  AVAILABLE
  FULLY_BOOKED
  CANCELLED
  COMPLETED
}

model PricingRule {
  id             String        @id @default(cuid())
  name           String
  description    String?
  amount         Float         // The price amount
  priceType      PriceType     @default(BASE)
  modifier       Float?        // For adjustments (percentage or fixed)
  isPercentage   Boolean       @default(false)
  startDate      DateTime?     // Null for base prices (never expires)
  endDate        DateTime?     // Null for base prices (never expires)
  appliesTo      PricingTarget
  categoryId     String?
  locationId     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  category       Category?        @relation(fields: [categoryId], references: [id])
  location       SessionLocation? @relation(fields: [locationId], references: [id])
}

enum PriceType {
  BASE
  ADJUSTMENT
  DISCOUNT
  SURGE
  SEASONAL
  PROMOTIONAL
}

enum PricingTarget {
  CATEGORY
  LOCATION
  WORKSHOP
  ALL
}

// DO NOT MODIFY MODELS BELOW
// Models below for Next-Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
